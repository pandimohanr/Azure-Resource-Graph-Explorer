resources
| where type =~ 'microsoft.network/virtualnetworks'
| project vnetId = id, vnetName = name, subnets = properties.subnets, dns = properties.dhcpOptions.dnsServers
| mv-expand subnets
| project vnetId, vnetName, subnetId1 = tostring(subnets.id), subnetName = subnets.name, dns
| join kind=inner (
    resources
    | where type has 'networkinterfaces'
    | project nicId = id, nicName = name, ipConfigurations = properties.ipConfigurations, 
              virtualMachineResourceId = properties.virtualMachine.id, //iff(isempty(properties.virtualMachine.id), id ,'Microsoft.Compute/virtualMachines')
              resourceType = iff(isempty(properties.virtualMachine.id),'Microsoft.Network/networkInterfaces','Microsoft.Compute/virtualMachines')
    | mv-expand ipConfigurations
    | extend subnetId2 = tostring(ipConfigurations.properties.subnet.id)
    | extend resourceGroup1 = tostring(split(subnetId2,"/",4)[0])
    | extend resourceName = coalesce(tostring(split(virtualMachineResourceId,"/",8)[0]),tostring(split(nicId,"/",8)[0])) 
    | project nicId, nicName, virtualMachineResourceId, resourceType, privateIpAddress = ipConfigurations.properties.privateIPAddress, subnetId2, resourceGroup1, resourceName
) on $left.subnetId1 == $right.subnetId2
| project-away subnetId2
|
union (
    resources
    | where type has 'microsoft.network/loadBalancers'
    | project lbId = id, lbName = name, ipConfigurations = properties.frontendIPConfigurations
    | mv-expand ipConfigurations
    | extend subnetId1 = tostring(ipConfigurations.properties.subnet.id)
    | extend resourceGroup1 = tostring(split(lbId,"/",4)[0])
    | project loadBalancerResourceId = lbId, resourceName = lbName, resourceType = 'Microsoft.Network/loadBalancers', privateIpAddress = ipConfigurations.properties.privateIPAddress, subnetId1, resourceGroup1
),
(
    resources
    | where type has 'microsoft.network/applicationGateways' 
 | project agId = id, agName = name, ipConfigurations = properties.gatewayIPConfigurations, privateIpAddress=properties.frontendIPConfigurations[1].properties.privateIPAddress
    | mv-expand ipConfigurations
    | extend subnetId1 = tostring(ipConfigurations.properties.subnet.id)
    | extend resourceGroup1 = tostring(split(agId,"/",4)[0])
    | project appGwResourceId = agId, resourceName = agName, resourceType = 'Microsoft.Network/applicationGateways', subnetId1,privateIpAddress, resourceGroup1
)
| join kind=fullouter (
resources
| join kind=leftouter(
    resourcecontainers 
    | where type=='microsoft.resources/subscriptions' 
    | project subscriptionName=name, subscriptionId
) on subscriptionId
| where type =~ 'Microsoft.Network/virtualNetworks'
| extend addressPrefixes=array_length(properties.addressSpace.addressPrefixes)
| extend vNetAddressSpace=properties.addressSpace.addressPrefixes
| mv-expand subnet=properties.subnets
| extend virtualNetwork = name
| extend subnetPrefix = subnet.properties.addressPrefix
| extend SubnetCIDR=subnet.properties.addressPrefix
| extend subnets = properties.subnets
| extend subnetName = tostring(subnet.name)
| extend subnetId = tostring(subnet.id)
| extend prefixLength = toint(split(subnetPrefix, "/")[1])
| extend addressPrefix = split(subnetPrefix, "/")[0]
| extend numberOfIpAddresses = trim_end(".0",tostring(pow(2, 32 - prefixLength) - 5))
| extend startIp = addressPrefix
| extend endIp = strcat(strcat_array((array_slice(split(addressPrefix, '.'), 0, 2)),"."),".",trim_end(".0",tostring(split(addressPrefix, '.')[3] + (pow(2, 32 - prefixLength) - 5))))
| extend endIPNew = case( prefixLength == 24, strcat(strcat(strcat_array((array_slice(split(startIp,'.'), 0, 1)), "."), "."),'1.255'),
    prefixLength == 23, strcat(strcat(strcat_array((array_slice(split(startIp,'.'), 0, 1)), "."), "."),'1.255'),
    prefixLength == 22, strcat(strcat(strcat_array((array_slice(split(startIp,'.'), 0, 1)), "."), "."),'3.255'),
    prefixLength == 21, strcat(strcat(strcat_array((array_slice(split(startIp,'.'), 0, 1)), "."), "."),'7.255'),
    prefixLength == 20, strcat(strcat(strcat_array((array_slice(split(startIp,'.'), 0, 1)), "."), "."),'15.255'),
    prefixLength == 19, strcat(strcat(strcat_array((array_slice(split(startIp,'.'), 0, 1)), "."), "."),'31.255'),
    prefixLength == 18, strcat(strcat(strcat_array((array_slice(split(startIp,'.'), 0, 1)), "."), "."),'63.255'),
    prefixLength == 17, strcat(strcat(strcat_array((array_slice(split(startIp,'.'), 0, 1)), "."), "."),'127.255'),
    prefixLength == 16, strcat(strcat(strcat_array((array_slice(split(startIp,'.'), 0, 1)), "."), "."),'255.255'),
    'unknown'
)
| extend finalendIPaddress = iff(endIPNew == "unknown", endIp, endIPNew) 
| join kind=leftouter (
    // Number of connected devices per VNet and Subnet
    resources
    | where type =~ 'microsoft.network/networkinterfaces'
    | project id, ipConfigurations = properties.ipConfigurations, virtualMachine = tostring(split(properties.virtualMachine.id,"/",8)[0])
    | mvexpand ipConfigurations
    | project id, subnetId = tostring(ipConfigurations.properties.subnet.id), virtualMachine
    | parse kind=regex subnetId with '/virtualNetworks/' virtualNetwork '/subnets/' subnet
    | extend resourceGroup = tostring(split(subnetId,"/",4)[0])
    | extend subnetName = subnet
    | summarize usedIPAddresses = count() by subnetName, virtualNetwork
)
on subnetName, virtualNetwork
| extend usedIPAddresses_new = iff(isnull(usedIPAddresses),0,usedIPAddresses)
| extend privateIP = properties.privateIpAddress
| project subscriptionName, resourceGroup, virtualNetwork, SubnetName = subnet.name, IPRange = strcat(startIp, " - ", finalendIPaddress), numberOfIpAddresses, SubnetCIDR, usedIPAddresses, AvailableIPAddresses = (toint(numberOfIpAddresses) - usedIPAddresses_new), subnetId
) on $left.subnetId1 == $right.subnetId
| project-away subnetId1
| project subscriptionName, resourceGroup=coalesce(resourceGroup,resourceGroup1), virtualNetwork, dns=coalesce(dns,"Default DNS Server"), SubnetName=coalesce(SubnetName,""), IPRange=coalesce(IPRange,"Isolated"), numberOfIpAddresses, SubnetCIDR=coalesce(SubnetCIDR,""), usedIPAddresses=coalesce(usedIPAddresses,0), AvailableIPAddresses=coalesce(AvailableIPAddresses,0), resourceType=coalesce(resourceType,"Subnet"), resourceName, privateIpAddress=iff(isnull(privateIpAddress),"No Private IP",privateIpAddress) //,
| sort by resourceName,resourceType, virtualNetwork, SubnetName
